import { corsHeaders } from '../_shared/cors.ts';

interface TrelloExportRequest {
  plan: {
    id: string;
    goal: string;
    timeline: string;
    phases: Array<{
      id: string;
      title: string;
      description: string;
      tasks: Array<{
        id: string;
        title: string;
        description: string;
        priority: string;
        estimatedTime: string;
      }>;
    }>;
  };
  apiKey: string;
  token: string;
}

Deno.serve(async (req: Request) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { plan, apiKey, token }: TrelloExportRequest = await req.json();

    if (!plan || !apiKey || !token) {
      return new Response(
        JSON.stringify({ error: 'Plan, API key, and token are required' }),
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    const baseUrl = 'https://api.trello.com/1';
    const auth = `key=${apiKey}&token=${token}`;

    // Step 1: Create the board
    const boardResponse = await fetch(`${baseUrl}/boards?${auth}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        name: `${plan.goal} (${plan.timeline})`,
        desc: `AI-generated project plan for: ${plan.goal}\n\nTimeline: ${plan.timeline}\n\nGenerated on: ${new Date().toLocaleDateString()}`,
        prefs_permissionLevel: 'private',
        prefs_voting: 'disabled',
        prefs_comments: 'members',
        prefs_invitations: 'members',
        prefs_selfJoin: false,
        prefs_cardCovers: true,
        prefs_background: 'blue',
      }),
    });

    if (!boardResponse.ok) {
      const errorText = await boardResponse.text();
      throw new Error(`Failed to create Trello board: ${errorText}`);
    }

    const board = await boardResponse.json();
    console.log('Created board:', board.id);

    // Step 2: Get default lists and delete them
    const listsResponse = await fetch(`${baseUrl}/boards/${board.id}/lists?${auth}`);
    if (listsResponse.ok) {
      const defaultLists = await listsResponse.json();
      for (const list of defaultLists) {
        await fetch(`${baseUrl}/lists/${list.id}/closed?${auth}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ value: true }),
        });
      }
    }

    // Step 3: Create lists for each phase
    const createdLists = [];
    for (const phase of plan.phases) {
      const listResponse = await fetch(`${baseUrl}/lists?${auth}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: phase.title,
          idBoard: board.id,
          pos: 'bottom',
        }),
      });

      if (!listResponse.ok) {
        throw new Error(`Failed to create list for phase: ${phase.title}`);
      }

      const list = await listResponse.json();
      createdLists.push({ ...list, phase });
      console.log(`Created list: ${list.id} for phase: ${phase.title}`);
    }

    // Step 4: Create cards for each task
    for (const listData of createdLists) {
      const { id: listId, phase } = listData;

      for (const task of phase.tasks) {
        const priorityLabel = task.priority === 'high' ? '🔴' : task.priority === 'medium' ? '🟡' : '🟢';
        const cardName = `${priorityLabel} ${task.title}`;
        
        const cardDesc = `${task.description}\n\n⏱️ **Estimated Time:** ${task.estimatedTime}\n📊 **Priority:** ${task.priority.toUpperCase()}\n\n---\n*Generated by AI Project Planner*`;

        const cardResponse = await fetch(`${baseUrl}/cards?${auth}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            name: cardName,
            desc: cardDesc,
            idList: listId,
            pos: 'bottom',
          }),
        });

        if (!cardResponse.ok) {
          console.error(`Failed to create card: ${task.title}`);
        } else {
          const card = await cardResponse.json();
          console.log(`Created card: ${card.id} for task: ${task.title}`);
        }
      }
    }

    // Step 5: Add a welcome card with project overview
    if (createdLists.length > 0) {
      const firstListId = createdLists[0].id;
      const welcomeCardDesc = `🎯 **Project Goal:** ${plan.goal}\n\n📅 **Timeline:** ${plan.timeline}\n\n📋 **Project Overview:**\nThis board contains ${plan.phases.length} phases with a total of ${plan.phases.reduce((acc, phase) => acc + phase.tasks.length, 0)} tasks.\n\n${plan.phases.map((phase, index) => `**Phase ${index + 1}:** ${phase.title}\n${phase.description}`).join('\n\n')}\n\n---\n*🤖 Generated by AI Project Planner*\n*✨ Export completed on ${new Date().toLocaleString()}*`;

      await fetch(`${baseUrl}/cards?${auth}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: '📋 Project Overview & Welcome',
          desc: welcomeCardDesc,
          idList: firstListId,
          pos: 'top',
        }),
      });
    }

    return new Response(
      JSON.stringify({
        id: board.id,
        name: board.name,
        url: board.url,
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  } catch (error) {
    console.error('Error exporting to Trello:', error);
    return new Response(
      JSON.stringify({ 
        error: error.message || 'Failed to export to Trello',
        details: 'Please check your API credentials and try again'
      }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});